<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<!--
   INDRA/CAR/PROY
   $Id: contenido_estado_unidades_geograficas_consultar.xml,v 1.1 2009/12/03 18:44:22 pecbazalar Exp $
   DESC

   DRUIDATARGET=/../../config/scripts/iniciales
-->
<!DOCTYPE PAGINA SYSTEM "dtd/druida_3_0.dtd">
<PAGINA nombre="contenido_estado_unidades_geograficas_consultar" titulo="Consultar estado de unidades geográficas" cod="0360" estilos="estilos.css" colorf="white"
        msgle="Consultar estado de unidades geográficas" onload="LoadBar()" xml:lang="es" >
<JS src="sicc_util.js"/>
<STYLE TYPE="text/css">
.treelistcontrol 
{
	font-family: microsoft sans serif, verdana;
	font-size: 8pt;
	position: relative;
	border: 2px inset;
	background-color: white;
}

.tlc_headings 
{
	position:relative;
	font-family: Arial, Helvetica, sans-serif; 
	font-size: 9pt; 
	font-weight: bold; 
	color: #000000; 
	//background-color: CCCCCC;
	background-color: threedface;
	border: 1px outset;
	border-top: 0px solid white;
	border-left: 0px solid white;
	height:16px;
}

.tlc_columnheading 
{
	font-size: 8pt;
	position: absolute;
	background-color: threedface;
	border: 1px outset;
	border-top: 1px solid white;
	border-left: 1px solid white;
	padding-left: 2px;
	padding-bottom: 1px;
}

.tlc_node {
	position: relative;
}

.tlc_node_row {
	position: relative;
	border-top: 1px dotted #EEEEEE;
	background-color: #F0F0F0; 
	font-family: Arial, Helvetica, sans-serif; 
	font-size: 9pt; 
	font-weight: bold; 
	color: #000000; 
	height:16px;
}

.tlc_node_row_hover {
	position: relative;
	border-top: 1px dotted #EEEEEE;
	background-color: #F0F0F0; 
	font-family: Arial, Helvetica, sans-serif; 
	font-size: 9pt; 
	font-weight: bold; 
	color: #000000;
	height:16px;
}

.tlc_node_row_click {
	position: relative;
	border-top: 1px dotted #EEEEEE;
	background-color: darkblue;
	font-weight: bold; 
	color: white;
	height:16px;
}

.tlc_node_text {
	position: absolute;
	height: 16px;
	vertical-align: middle;
	overflow: hidden;
	padding-left: 2px;
	white-space: nowrap;
}

.tlc_node_children {
}

</STYLE>
<JAVASCRIPT>
<![CDATA[
var formName = 'frmContenido';
var unidades = "";
var loading = false;
var varNoLimpiarSICC = true;

TreeListControlHandler = {
	nextID					: 0,
	getUniqueID				: function() { return this.nextID++; },
	allTrees				   : new Array(),
	preventRowClick		: false,
	callExpand				: function(treeID, nodeID) { this.allTrees[treeID].allNodes[nodeID].expand(); },
	callCollapse			: function(treeID, nodeID) { this.allTrees[treeID].allNodes[nodeID].collapse(); },
	callRowClick			: function(treeID, nodeID) { this.allTrees[treeID].allNodes[nodeID].click(); },
	callCheckBoxes			: function(treeID, nodeID) { this.allTrees[treeID].allNodes[nodeID].recalcCheckBoxes(); },	
	imgConnectMore			: 'cn_more.gif',
	imgConnectEnd			: 'cn_end.gif',
	imgConnectBridge		: 'cn_bridge.gif',
	imgHandleCollapseMore	: 'hdl_coll_more.gif',
	imgHandleCollapseEnd	: 'hdl_coll_end.gif',
	imgHandleExpandMore	: 'hdl_exp_more.gif',
	imgHandleExpandEnd	: 'hdl_exp_end.gif',
	imgEmpty				: 'vacio.gif',
	imgIconDefault			: 'carpeta.gif',	
	xmlHTTPStateChange	: function(treeID, nodeID) { this.allTrees[treeID].allNodes[nodeID].xmlCallback(); }
}

function createXMLstrByArray(arr) {
  var xml = "";
  if(arr != "") {
     xml = "<ROWSET>";
     for(var i = 0; i < arr.length;i++) {
         xml += "<ROW>";
         for(var j = 0; j < arr[i].length;j++) {
            xml += "<CAMPO>" + arr[i][j] + "</CAMPO>";
         }
         xml += "</ROW>";
     }
     xml += "</ROWSET>";
  }
  return xml;
}

function loadFirstNodeByArray(arr) {
   if(arr != "") {
      var xDoc = createXMLstrByArray(arr);
      set(formName + '.hidNode',xDoc);		
      firstDoc = new ActiveXObject("Microsoft.XMLDOM");
      firstDoc.loadXML(xDoc); 
      if(firstDoc.readyState == 4) {
           var xmlDocElem = firstDoc.documentElement;
           var parentNodes = 0;
           if(xmlDocElem.hasChildNodes()) {                     
               var node = xmlDocElem.firstChild;			
            while(node != null)	{
                       /*
                          OID_VALO_ESTR_GEOP  - [0]
                          COD_UNID_GEOG       - [1]
                          DES_GEOG            - [2]
                          IND_ACTI            - [3]
                          COD_NSE1            - [4]
                          COD_NSE2            - [5]
                          COD_NSE3            - [6]
                          COD_POST            - [7]
                          UBIGEO              - [8]
                       */
                  _nodeTree = new TreeListControlNode(false, null, 'invalid.text',node.childNodes[0].text);
                  _nodeTree.setText('',node.childNodes[0].text,node.childNodes[2].text, node.childNodes[4].text,node.childNodes[5].text,node.childNodes[6].text,node.childNodes[7].text);
                  _nodeTree.checked = node.childNodes[3].text;
                  _nodeTree.loaded_base = node.childNodes[3].text;
                  _nodeTree.ubigeo = node.childNodes[8].text;
                  tree.add(_nodeTree);
                  /* PARA CASO CONSULTAR */
                  document.getElementById(node.childNodes[0].text).disabled = true;
                  node = node.nextSibling;
            }		
         }
         tree.allNodes[2].remove();
         tree.allNodes[4].remove();
         document.getElementById("treelistcontrol0").style.display = "block";
         set(formName + '.hidNode','');
      }
   }else{ /* alert("Return null: [No hay registros en la tabla o error en servidor]"); */  }
}

function LoadBar() {
    configurarMenuSecundario(formName);
    //asignar([['LISTA', '', 'ConectorPruebaArbol', 'dtoSalida.resultado_ROWSET', 'ConectorConsultaUGTerritorios|xxx','loadFirstNodeByArray(datos);']], '', '');
    asignar([['LISTA', '', 'ConectorDTZON', 'dtoSalida.resultado_ROWSET', 'ConectorConsultaUGTerritorios|xxx','loadFirstNodeByArray(datos);']], '', '');
    //getById("div_pais").innerHTML = "<b>&nbsp;&nbsp;&nbsp;&nbsp;" + get( formName + '.hidPais').toString() + "</b>";
    getById("s_23").innerHTML = getLabelById("e794"); 
    getById("s_24").innerHTML = getLabelById("e1137"); 
    getById("s_25").innerHTML = getLabelById("e243") + "1";
    getById("s_26").innerHTML = getLabelById("e243") + "2";
    getById("s_27").innerHTML = getLabelById("e243") + "3";
    getById("s_28").innerHTML = getLabelById("e1344");

   //ShowError();

}

function getById(id){ return document.getElementById(id); }
function getLabelById(id) { return getById(id).children[0].children[0].children[0].children[0].innerText; }
function chequeaErrores() {
			var codigoError = get(formName + ".errCodigo");
			var descError = get(formName + ".errDescripcion");
			if (codigoError == "") {
					return true;
			} else	{
  				   fMostrarMensajeError(codigoError, descError);
					//alert("Codigo de error: " +  codigoError);				
					
					return false;
			}
 }

var ob = new Object();
var arrCols = new Array();

function TreeListControl(sRootLabel, sIconSrc, hideColumnHeadings, hideRootNode) {
	this.ID						= TreeListControlHandler.getUniqueID();
	TreeListControlHandler.allTrees[this.ID] = this;
	this.all					= new Array();
	this.allNodes				= new Array(); 
	this.columns				= new Array();
	this.rootNode				= new TreeListControlNode(true, sIconSrc, null, 1);
	this.rootNode.columnText[0]	= sRootLabel;
	this.rootNode.depth			= 0;
	this.rootNode.bShowHandle	= false;
	this.rootNode.oTree			= this;
	this.allNodes[this.rootNode.ID] = this.rootNode;
	this.rendered				= false;
	this.nLabelColumn			= 0; 
	this.iconPath				= '/sicc/es/img/zon/';
	this.showColumnHeadings	= hideColumnHeadings ? false : true;
	this.showRootNode			= hideRootNode ? false : true;
	this.disableRecalc		= false;
}

TreeListControl.prototype.toString = function() {
	var str, x;
	str = '';
	x = 0;
	for(var i=0; i<this.columns.length; i++) {
	    //alert(this.columns[i].width);
		str += '<div class="tlc_columnheading" style="width:' + this.columns[i].width + 'px; left:' + x + 'px; ' +
			   ' ">' + this.columns[i].name + '</div>';
    	arrCols[i] = this.columns[i].width;
		x += this.columns[i].width;
	}
	//str = '<div id="treelistcontrol' + this.ID + '" class="treelistcontrol" style="width:' + (x + 4) +
	str = '<div id="treelistcontrol' + this.ID + '" class="treelistcontrol" style="width: 100%;' +
		  'top: 0px; display: none;"><div class="tlc_headings" style="display:expression(TreeListControlHandler.allTrees[' + this.ID +
			   '].showColumnHeadings ? \'block\' : \'none\');">' + str + '</div>' + this.rootNode + '</div>';
	this.rendered = true;
	return str;
}

TreeListControl.prototype.redraw = function() { }

TreeListControl.prototype.add = function(oNode) {
	this.rootNode.add(oNode);
}

TreeListControl.prototype.addColumn = function(oColumn) {
	this.columns[this.columns.length] = oColumn;
}

function TreeListControlColumn(width, name, onclickdisabled) {
	this.name = name;
	this.width = width ? width : '100';
	this.onclickdisabled = onclickdisabled ? true : false;	
}

function TreeListControlNode(bShowChildren, sIconSrc, sXMLSrc, refKey) {
	this.columnText			= new Array();
	this.ckKeys			    = new Array();
	this.checked			= 0;
    this.ubigeo			    = "";
	this.loaded_base        = 0;
	this.bShowChildren 		= bShowChildren ? true : false;
	this.sIconSrc			= sIconSrc ? sIconSrc : null;
	this.sXMLSrc			= (typeof(sXMLSrc) == 'string') ? sXMLSrc : '';
	this.bDynamicNode		= this.sXMLSrc.length > 0 ? true : false; 
	this.bShowHandle		= true; //this is the + or - icon
	this.refKey				= (refKey || refKey == 0) ? refKey : null;
	this.ID					= TreeListControlHandler.getUniqueID();            
	this.sImages			= '';
	this.sHandle			= '';
	this.onclick			= '';
	this.onclickCheckBox	= '';
	this.stage			    = 0;
	this.stageCounter		= 0;
	this.useIcon			= true;
	this.nextSibling		= null;
	this.previousSibling	= null;
	this.firstChild			= null;
	this.lastChild			= null;
	this.parentNode			= null;
	this.oTree				= null;
	this.rendered			= false;
	this.nodes			    = 0;	
}

TreeListControlNode.prototype.toString = function() {
	var str = '<div class="tlc_node" id="tlcnode' + this.ID + '" >';
	str += '<div class="tlc_node_row" onmouseenter="this.className=\'tlc_node_row_hover\'"' +
		   ' onmouseleave="this.className=\'tlc_node_row\';" style="cursor:default;' +
		   (this.parentNode == null ? 'display:expression(TreeListControlHandler.allTrees[' + this.oTree.ID +
			   '].showRootNode ? \'block\' : \'none\');' : '') + ' width:' + arrCols[this.ID] + 'px;  " onclick="if(!TreeListControlHandler.preventRowClick) { ' + this.onclick + ' }"' +
		   ' onmousedown="if(!TreeListControlHandler.preventRowClick) this.className=\'tlc_node_row_click\';" onmouseup="this.className=\'tlc_node_row_hover\';">';
	var c = this.oTree.columns;
	var x = 0;
	for(var i=0; i<c.length; i++) {
		str += '<div class="tlc_node_text" style="width:' + c[i].width + 'px; left:' + x + 'px;"' +
				(c[i].onclickdisabled ? ' onmouseenter="TreeListControlHandler.preventRowClick=true;" onmouseleave="TreeListControlHandler.preventRowClick=false;"' : '' )+ '>';
		if(this.oTree.nLabelColumn == i) {
			if(!this.oTree.disableRecalc) this.recalcImages();
			str += '<span>'; //handle and images
			str += this.sImages + this.sHandle + '<img src="' + (this.sIconSrc ? this.sIconSrc : this.oTree.iconPath + TreeListControlHandler.imgIconDefault) + '" width="16" height="16" align="absmiddle">';
			str += '</span>&nbsp;';
		}
		if(i == 1) {
        var chk = "";
		  if(this.checked == "1") chk = "checked";		  
		  str += '<span><input type="checkbox" id="'+(this.columnText[i] ? this.columnText[i] : '&nbsp;')+'" nodes="0" onclick="TreeListControlHandler.callCheckBoxes('+this.oTree.ID+','+this.ID+');" tree_node="" '+chk+'></input></span></div>';
		}else{
		  str += '<span>' + (this.columnText[i] ? this.columnText[i] : '&nbsp;') + '</span></div>';
		}
		x += c[i].width;
	}
	str += '</div><div id="children' + this.ID + '" class="tlc_node_children" style="display:' + ((this.bShowChildren && this.firstChild) ? 'block' : 'none') + '">';
	var node = this.firstChild;
	while(node) {
		str += node;
		node = node.nextSibling;
	}
	str += "</div></div>";
	this.rendered = true
	return str;
}

TreeListControlNode.prototype.recalcImages = function() {
	var h = TreeListControlHandler;
	this.sImages = '';
	if(this.parentNode) {
		if(this.parentNode.parentNode) {
			this.sImages = this.parentNode.sImages;
			this.sImages += '<img src="' + this.oTree.iconPath +
							(this.parentNode.nextSibling ? h.imgConnectBridge : h.imgEmpty) +
							'" width="16" height="16" align="absmiddle">';
		}
		if(this.firstChild || this.bDynamicNode) {
			if(this.bShowChildren && !this.bDynamicNode) {
				this.sHandle = '<img src="' + this.oTree.iconPath +
								(this.nextSibling ? h.imgHandleCollapseMore : h.imgHandleCollapseEnd) +
								 '" style="cursor:hand;"' +
								' width="16" height="16" align="absmiddle" onmouseenter="TreeListControlHandler.preventRowClick=true;" onmouseleave="TreeListControlHandler.preventRowClick=false;"' +
								' onclick="TreeListControlHandler.callCollapse(' +
								this.oTree.ID + ',' + this.ID + ');">';
			} else {
				this.sHandle = '<img src="' + this.oTree.iconPath +
								(this.nextSibling ? h.imgHandleExpandMore : h.imgHandleExpandEnd) +
								 '" style="cursor:hand;"' +
								' width="16" height="16" align="absmiddle"' +
								' onmouseenter="TreeListControlHandler.preventRowClick=true;"' +
								' onmouseleave="TreeListControlHandler.preventRowClick=false;"' +
								' onclick="TreeListControlHandler.callExpand(' +
								this.oTree.ID + ',' + this.ID + ');">';
			}
		} else {
			this.sHandle = '<img src="' + this.oTree.iconPath +
							(this.nextSibling ? h.imgConnectMore : h.imgConnectEnd) +
							'" width="16" height="16" align="absmiddle">';
		}
	}
	if(this.rendered) {
		var o = document.all['tlcnode'+this.ID].firstChild.childNodes[this.oTree.nLabelColumn].firstChild;
		o.innerHTML = this.sImages + this.sHandle + (this.useIcon ? '<img src="' + (this.sIconSrc ? this.sIconSrc : this.oTree.iconPath + TreeListControlHandler.imgIconDefault) + '" width="16" height="16" align="absmiddle">' : '');
	}
}

TreeListControlNode.prototype.recalcChildImages = function() {
	var node = this.firstChild;
	while(node) {
		node.recalcImages();
		node.recalcChildImages();
		node = node.nextSibling;
	}
}

TreeListControlNode.prototype.expand = function() {
  if(!loading) {
      this.bShowChildren = true;
      var o = document.all['tlcnode' + this.ID];    
      o.lastChild.style.display = 'block';
      var id1 = this.oTree.ID;
      var id2 = this.ID;
      if(!this.oTree.disableRecalc) this.recalcImages();
      if(this.bDynamicNode) {
         document.all['tlcnode' + this.ID].firstChild.className = 'tlc_node_row';
         this.bDynamicNode = false;		
         ob = this;      
         searchNivel(this.refKey);      
      }else{  // if not dynamicNode
         var bool = (document.getElementById(this.refKey).checked == false)?true:false;
         for(var s = 0; s < this.nodes; s++)	{
            if(bool) getById(this.ckKeys[s]).checked = (!bool);
            // Para caso CONSULTAR
            getById(this.ckKeys[s]).disabled = true;			
         }
      }
   }
}

function searchNivel(csv_orde) {
   loading = true;
   //asignar([['LISTA', '', 'ConectorPruebaArbol', 'dtoSalida.resultado_ROWSET', 'ConectorConsultaUGTerritorios|' + csv_orde,'loadNode(datos);']], '', '');
   //try{
   //alert(csv_orde);
   if(csv_orde.substring(0,5) != 'nlres') // seria -1
   {
	  asignar([['LISTA', '', 'ConectorDTZON', 'dtoSalida.resultado_ROWSET', 'ConectorConsultaUGTerritorios|' + csv_orde,'loadNode(datos);']],'','');
   }
   else                                                    
    loadEmptyNode(); 
   //}catch(e){}
}


function loadEmptyNode() 
{
    ob.sXMLSrc = null;
    ob.collapse();
    ob.recalcImages();
    ob.recalcChildImages();
    loading = false;
}

var cnt_nlres = 0;

function loadNode(arr) {
     //alert(arr);
	  /*
        OID_VALO_ESTR_GEOP  - node.childNodes[0].text
        COD_UNID_GEOG       - node.childNodes[1].text
        DES_GEOG            - node.childNodes[2].text
        IND_ACTI            - node.childNodes[3].text
        COD_NSE1            - node.childNodes[4].text
        COD_NSE2            - node.childNodes[5].text
        COD_NSE3            - node.childNodes[6].text
        COD_POST            - node.childNodes[7].text
        ubigeo              - node.childNodes[8].text;
     */
	 var xDocument = createXMLstrByArray(arr);
	 if(xDocument != null && xDocument != "") {
		var nodeResult = new ActiveXObject("Microsoft.XMLDOM");
		nodeResult.loadXML(xDocument);        
	   if(nodeResult.readyState == 4) {
      var xmlDocElem = nodeResult.documentElement;
	  
		var parentNodes = 0;
        if(xmlDocElem.hasChildNodes()) {                     
            var node = xmlDocElem.firstChild;			
			while(node != null)	{
			   var b = node.childNodes.length;	
				var subNode = node.firstChild;				
				while(subNode != null) {			   
               strKey += subNode.text;
				   var ssNode = subNode.firstChild;
				   var i = 0;
               var strKey = "";                  
				   subNode = subNode.nextSibling;
				}
				 var o;
				 var rKey = "";
				 var modes = 'invalid.text';
                   if(node.childNodes[0].text == '-1')
				   {
				     //alert(node.childNodes[0].text);
					 cnt_nlres++;
				     node.childNodes[0].text = 'nlres_' + ob.stage + '_' + cnt_nlres;
				   }
				   if(ob.stage == 9) {
                     o = new TreeListControlNode(false,null,null,node.childNodes[0].text);
				         o.setText('',node.childNodes[0].text,node.childNodes[2].text,node.childNodes[4].text,node.childNodes[5].text,node.childNodes[6].text,node.childNodes[7].text);
				   }else{
                       o = new TreeListControlNode(false,null,'invalid.text',node.childNodes[0].text);					   o.setText('',node.childNodes[0].text,node.childNodes[2].text,node.childNodes[4].text,node.childNodes[5].text,node.childNodes[6].text,node.childNodes[7].text);
					   o.sXMLSrc = '<rowset id="data_' + node.childNodes[0].text + '" oid="'+node.childNodes[0].text+'" activo="'+node.childNodes[3].text+'" ubigeo="' +  node.childNodes[8].text + '" />';
					   o.checked = node.childNodes[3].text;
					   o.loaded_base = node.childNodes[3].text;
                  o.ubigeo = node.childNodes[8].text;
				   }				  
				   o.stage = ob.stage + 1;
                   
				   ob.ckKeys[parentNodes] = node.childNodes[0].text;				   
			       ob.add(o);
                /* PARA CASO CONSULTAR */
               document.getElementById(node.childNodes[0].text).disabled = true;
				   if(!document.getElementById(ob.refKey).checked) {
                     o.checked = 0;
					 document.getElementById(o.refKey).checked = false;
					 document.getElementById(node.childNodes[0].text).disabled = true;
				   }
                   parentNodes++;
				   node = node.nextSibling;
			}		
		}
         ob.nodes = parentNodes;
         document.getElementById(ob.refKey).nodes = parentNodes;
         ob.recalcImages();
         loading = false;
		}
	}else{
       ob.sXMLSrc = null;
	   ob.collapse();
	   ob.recalcImages();
	   ob.recalcChildImages();
       loading = false;
	}	
}
var d = 0;
TreeListControlNode.prototype.cleanCheckBoxes = function(obj, bool) {   
	   for(i = 0; i < obj.nodes; i++) {
		  if(bool) document.getElementById(obj.ckKeys[i]).checked = (!bool);
		  document.getElementById(obj.ckKeys[i]).disabled = bool;
      }
      for(i = 0; i < obj.nodes; i++) {
		  if(bool) {
				   var node = obj.firstChild;
				   if(this.stageCounter != 6) {
                      this.stageCounter++;				     
                       while(node != null) {
                           this.cleanCheckBoxes(node,bool);
                        node = node.nextSibling;
                      }  
               }
		  }
      }  
}

TreeListControlNode.prototype.recalcCheckBoxes = function() {
	var bool = (document.getElementById(this.refKey).checked == false)?true:false;
	with (this) {
       checked = (bool)?0:1;
	   stageCounter = 0;
	   cleanCheckBoxes(this,bool);
	}
}

TreeListControlNode.prototype.callCheckBoxes = function(){ }

TreeListControlNode.prototype.collapse = function() {
	this.bShowChildren = false;
	var o = document.all['tlcnode' + this.ID];
	o.lastChild.style.display = 'none';
	var img = o.childNodes[0].childNodes[this.oTree.nLabelColumn].firstChild.lastChild.previousSibling;
	var id1 = this.oTree.ID;
	var id2 = this.ID;
	img.onclick = function() { TreeListControlHandler.callExpand(id1, id2); return false; };
	img.src = this.oTree.iconPath + (this.nextSibling ? TreeListControlHandler.imgHandleExpandMore : TreeListControlHandler.imgHandleExpandEnd);
}

TreeListControlNode.prototype.click = function() { }
TreeListControlNode.prototype.setText = function() {
	for(var i=0; i<arguments.length; i++)
		this.setColumnText(i, arguments[i]);
}

TreeListControlNode.prototype.setColumnText = function(nColumn, sText) {
	this.columnText[nColumn] = (sText ? sText : '');
	if(this.rendered) {
		var o = document.all['tlcnode' + this.ID];
		o.firstChild.childNodes[nColumn].lastChild.innerHTML = this.columnText[nColumn];
	}
}

TreeListControlNode.prototype.add = function(oNode, bNoRedraw, oSibling, bInsertAfter) {
	if(bNoRedraw) this.oTree.disableRecalc = true;
	this.bDynamicNode = false;
	oNode.oTree = this.oTree;
	oNode.parentNode = this;
	if(oNode.refKey || oNode.refKey == 0) this.oTree.all[oNode.refKey] = oNode;
	this.oTree.allNodes[oNode.ID] = oNode;
	if(!this.firstChild) {
		this.firstChild = oNode;
		this.lastChild = oNode;
	} else {
		var node1, node2;
		if(oSibling) {
			if(bInsertAfter) {
				node1 = oSibling;
				node2 = oSibling.nextSibling;
			} else {
				node1 = oSibling.previousSibling;
				node2 = oSibling;
			}
		} else {
			node1 = this.lastChild;
			node2 = null;
		}
		if(node1) {
			oNode.previousSibling = node1;
			node1.nextSibling = oNode;
		} else {
			this.firstChild = oNode;
		}
		if(node2) {
			oNode.nextSibling = node2;
			node2.previousSibling = oNode;
		} else {
			this.lastChild = oNode;
		}
	}
	if(this.oTree.rendered) {
		var oSib;
		var html = oNode + '';
		var oParent = document.all['tlcnode' + this.ID];
		if(node1) {
			oSib = document.all['tlcnode' + node1.ID];
			oSib.insertAdjacentHTML('afterEnd', html);
		} else if(node2) {
			oSib = document.all['tlcnode' + node2.ID];
			oSib.insertAdjacentHTML('beforeBegin', html);
		} else {
			oParent.lastChild.innerHTML = html;
		}
		if(this.parentNode) this.expand();
		if(!node2 && node1) {
			node1.recalcImages();
			node1.recalcChildImages();
		}
	}
	if(bNoRedraw) this.oTree.disableRecalc = false;
}

TreeListControlNode.prototype.insertBefore = function(oNode, bNoRedraw) {
	this.parentNode.add(oNode, bNoRedraw, this, false);
}

TreeListControlNode.prototype.insertAfter = function(oNode, bNoRedraw) {
	this.parentNode.add(oNode, bNoRedraw, this, true);
}

TreeListControlNode.prototype.remove = function() {
	this.removeChildren();
	var node1 = this.previousSibling;
	var node2 = this.nextSibling;
	if(node1)
		node1.nextSibling = node2;
	else
		this.parentNode.firstChild = node2;
	if(node2)
		node2.previousSibling = node1;
	else
		this.parentNode.lastChild = node1;
	this.oTree.allNodes[this.ID] = null;
	if(this.refKey != null) this.oTree.all[this.refKey] = null;
	var p = document.all['tlcnode' + this.ID].parentElement;
	document.all['tlcnode' + this.ID].removeNode(true);
	if(this.rendered && this.previousSibling && !this.nextSibling) {
		this.previousSibling.recalcImages();
		this.previousSibling.recalcChildImages();
	}
	if(!this.parentNode.firstChild) {
		this.parentNode.recalcImages();
		p.style.display = 'none';
	}
	this.rendered = false;
	this.parentNode = null;
	this.nextSibling = null;
	this.previousSibling = null;
	this.firstChild = null;
	this.lastChild = null;
	return this;
}

TreeListControlNode.prototype.removeChildren = function() {
	var node = this.firstChild;
	while(node) {
		node.removeChildren();
		this.oTree.allNodes[node.ID] = null;
		var dead = node;
		node = node.nextSibling;
		delete dead;
	}
}

TreeListControlNode.prototype.xmlCallback = function() {
	var failed;
	if(this.xmlhttp.readyState == 4)
		if(this.xmlhttp.status==0) {
			var xml = new ActiveXObject("Microsoft.XMLDOM");
			if(xml.loadXML(this.xmlhttp.responseText)) {
				failed = false;
				this.firstChild.remove();
				if(xml.documentElement) {
					this.addXMLChildNodes(xml.documentElement, this);
				}
				this.recalcImages();
			} else {
				failed = true;
			}
		} else {
			failed = true;
		}
		if(failed) {
			this.firstChild.setColumnText(this.oTree.nLabelColumn, '<span style="color:red">Unavailable - ' + this.xmlhttp.status + '</span>');
			this.firstChild.useIcon = false;
			this.firstChild.recalcImages();
		}
}

TreeListControlNode.prototype.addXMLChildNodes = function(xml, oParent) {
	var showchildren, refkey, xmlsrc, onclick, iconsrc;
	if(xml.childNodes.length > 0) {
		var x = xml.lastChild;
		while(x) {
			showchildren = x.getAttribute('showchildren');
			if(!showchildren) showchildren = false;
			else showchildren = (showchildren == 'yes' ? true : false);
			refkey = x.getAttribute('refkey');
			if(!refkey) refkey = null;
			xmlsrc = x.getAttribute('xmlsrc');
			if(!xmlsrc) xmlsrc = null;
			onclick = x.getAttribute('onclick');
			if(!onclick) onclick = null;
			iconsrc = x.getAttribute('iconsrc');
			if(!iconsrc) iconsrc = null;
			var node = new TreeListControlNode(showchildren, iconsrc, xmlsrc, refkey);
			node.onclick = onclick;
			for(var i=0; i<x.childNodes.length-1; i++)
				node.setColumnText(i,x.childNodes[i].firstChild.nodeValue+'');
			if(oParent.firstChild)
				oParent.firstChild.insertBefore(node);
			else
				oParent.add(node);
			if(x.lastChild.childNodes.length > 0)
				this.addXMLChildNodes(x.lastChild, node)
			x = x.previousSibling;
		}
	}
}

function getResultDocument() {
    _stageCounter = 1;
	sResult = '<rowset2 id="root">\n';
	var xmlDocElem = firstDoc.documentElement;
	if(xmlDocElem.hasChildNodes()) {
	   var cnt = 8;
		var node = xmlDocElem.firstChild;			
		while(node != null)	{
			if(tree.allNodes[cnt].checked == 1) {			   
			   sResult += '\t<rowset OID="'+tree.allNodes[cnt].refKey+'" ACTIVO="1" ACTIVO_LOADED="'+tree.allNodes[cnt].loaded_base+'" UBIGEO="' + tree.allNodes[cnt].ubigeo + '" >\n';
			   var _node_1 = tree.allNodes[cnt].firstChild;
			   if(_node_1 != null) {
			     while(_node_1 != null) {				 
                d++;
				    _rAddNode(_node_1);
                  _node_1 = _node_1.nextSibling;
                 }
			   }
               sResult += '\t</rowset>\n';
			} else {
               sResult += '\t<rowset OID="'+tree.allNodes[cnt].refKey+'" ACTIVO="0" ACTIVO_LOADED="'+tree.allNodes[cnt].loaded_base+'" UBIGEO="' + tree.allNodes[cnt].ubigeo + '" />\n';
			}			 
         cnt++;
			node = node.nextSibling;
		}		
	}
	sResult += '</rowset2>';
	return sResult;
}

var _stageCounter;
var sResult = "";
var csv_druida_grabara = "";
var d = 0;
function _rAddNode(node) {
   var space = "";
   if( d == 1) _stageCounter++; 
   for(var sp = 0;sp < _stageCounter;sp++) {	
       space += "\t";   
   }
   if(node.checked == 1) {     	 	 
	 sResult += space + '<rowset OID="'+node.refKey+'" ACTIVO="1" ACTIVO_LOADED="'+node.loaded_base+'" UBIGEO="' + node.ubigeo + '" >\n';	 				     
	 var next_node = node.firstChild;	 
	 if(next_node != null) {
	     d = 0;
		 while(next_node != null) {
		   d++;
		  _rAddNode(next_node);		  
		  next_node = next_node.nextSibling;
		 }
	 }
	 sResult += space + '</rowset>\n';
   } else {	     
	 sResult += space + '<rowset OID="'+node.refKey+'" ACTIVO="0" ACTIVO_LOADED="'+node.loaded_base+'" UBIGEO="' + node.ubigeo + '"/>\n';
   }
}



function fLimpiar() {
   set(formName + '.conectorAction', 'LPEstadoUnidadesGeograficas');
   set(formName + '.accion','limpiar');  
   get(formName + '.exito','');
   enviaSICC(formName);
}

// ancho debe ser 552 px !
tree = new TreeListControl('UBIGEOTree', '');
tree.addColumn ( new TreeListControlColumn(1, '') );
tree.addColumn ( new TreeListControlColumn(38, '<span id="s_23"></span>', true) );
tree.addColumn ( new TreeListControlColumn(360,'<span id="s_24"></span>') );
tree.addColumn ( new TreeListControlColumn(40, '<span id="s_25"></span>') );
tree.addColumn ( new TreeListControlColumn(40, '<span id="s_26"></span>') );
tree.addColumn ( new TreeListControlColumn(40, '<span id="s_27"></span>') );
tree.addColumn ( new TreeListControlColumn(80, '<span id="s_28"></span>') );
tree.rootNode.setText('','chk_root','UBIGEOTree','','?');
tree.showRootNode = (!tree.showRootNode);
tree.nLabelColumn = 2;
var node = new TreeListControlNode(true);
node.setText('.','chk_1','....','....','....');
tree.add(node);
var node2 = new TreeListControlNode(false, null, null);
node2.setText('','chk_9','....','....','....');
node.add(node2);
var node3 = new TreeListControlNode(true);
node3.setText('.','chk_2','....','....','....');
node.insertBefore(node3);
var node4 = new TreeListControlNode(true);
node4.setText('.','chk_3','....','....','....');
node2.insertBefore(node4);
var node5 = new TreeListControlNode(true);
node5.setText('','chk_4','....','....','....');
node4.add(node5);
var node6 = new TreeListControlNode(true);
node6.setText('','chk_5','....','....','....');
node3.add(node6);
//document.write("<div id=\"div_pais\" class=\"tlc_columnheading\" style=\"width: 553px; left:0px;\"></div>" + tree);
document.write(tree);

//alert(document.getElementById("chk_5").outerHTML);



]]>
</JAVASCRIPT>
<FORMULARIO id="frmContenido" nombre="frmContenido">
 <VAR nombre="accion" valor=""/>
 <VAR nombre="conectorAction" valor="" />
 <VAR nombre="errCodigo" valor=""/>
 <VAR nombre="errDescripcion"  valor="" />
 <VAR nombre="hidPais" valor=""/>
 <VAR nombre="hidNode" valor="" />
 <VAR nombre="hidEstadoUnidades" valor=""/>
 <VAR nombre="exito" valor=""/>
 <CAPA nombre="CAPITA" alto="202" ancho="200" colorf="" borde="0" imagenf="" repeat="" padding="" visibilidad="hidden"       	  contravsb="" x="0" y="124" zindex="">
   <DIV id="div_labels" >
     <LABELC nombre="e243" cod="243" id="datosTitle" />
     <LABELC nombre="e100" cod="357" id="datosTitle" />
     <LABELC nombre="e794" cod="794" id="datosTitle" /> <!-- Activa -->
     <LABELC nombre="e1344" cod="1344" id="datosTitle" /> <!-- Cód. postal -->
     <LABELC nombre="e1137" cod="1137" id="datosTitle" /> <!-- Unidadaes geogr. -->
   </DIV>
</CAPA></FORMULARIO>
</PAGINA>

